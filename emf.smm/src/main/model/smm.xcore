@Ecore(nsURI="http://www.atlanmod.org/zoo/smm")
@GenModel(modelDirectory="/emf-smm/src/main/java-gen",
complianceLevel="8.0")


package org.omg.smm

import org.eclipse.emf.ecore.EObject
import java.text.SimpleDateFormat

abstract class AbstractMeasureElement extends SmmElement {}

enum Accumulator {
	sum
	maximum
	minimum
	average
	standardDeviation
	product
	custom
}

class Annotation extends SmmElement
{
	String[1] text
}

class Argument extends SmmElement
{
	String[1] Type
	String[1] value
	refers ObservedMeasure[?] observedMeasure opposite arguments
}

class Attribute extends SmmElement
{
	String[1] tag
	String[1] value
}

class Base1MeasureRelationship extends ScaledBaseMeasureRelationship {}

class Base1MeasurementRelationship extends ScaledBaseMeasurementRelationship {}

class Base2MeasureRelationship extends ScaledBaseMeasureRelationship {}

class Base2MeasurementRelationship extends ScaledBaseMeasurementRelationship {}

class BaseNMeasureRelationship extends ScaledBaseMeasureRelationship
{
	refers BaseNMeasurementRelationship[1..*] mappedFrom opposite mapsTo
}

class BaseNMeasurementRelationship extends ScaledBaseMeasurementRelationship
{
	refers BaseNMeasureRelationship[?] mapsTo opposite mappedFrom
}

class BinaryMeasure extends DimensionalMeasure
{
	BinaryFunctor[1] functor
	refers Base1MeasureRelationship[1] baseMeasure1To
	refers Base2MeasureRelationship[1] baseMeasure2To
	refers Operation[?] customFunctor
}

class BinaryMeasurement extends DimensionalMeasurement
{
	Boolean[1] isBaseSupplied
	refers Base2MeasurementRelationship[?] baseMeasurement2To
	refers Base1MeasurementRelationship[?] baseMeasurement1To
	refers Operation[?] baseQuery
}

class CategoryRelationship extends SmmRelationship {}

class Characteristic extends AbstractMeasureElement
{
	contains Characteristic[?] parent
}

class CollectiveMeasure extends DimensionalMeasure
{
	Accumulator[1] accumulator
	refers BaseNMeasureRelationship[1..*] baseMeasureTo
	refers Operation[?] customAccumulator
}

class CollectiveMeasurement extends DimensionalMeasurement
{
	Boolean[1] isBaseSupplied
	refers BaseNMeasurementRelationship[1..*] baseMeasurementTo
	refers Operation[?] baseQuery
}

abstract class DimensionalMeasure extends Measure
{
	refers Base1MeasureRelationship[0..*] baseMeasure1From
	refers BaseNMeasureRelationship[0..*] baseMeasureFrom
	refers Base2MeasureRelationship[0..*] baseMeasure2From
	refers RankingMeasureRelationship[0..*] rankingFrom
	refers RescaledMeasureRelationship[0..*] rescaleTo
	refers GradeMeasureRelationship[0..*] gradeFrom
	refers UnitOfMeasure[1] unit
	String[?] formula
}

abstract class DimensionalMeasurement extends Measurement
{
	double[1] value
	refers Base1MeasurementRelationship[0..*] baseMeasurement1From
	refers BaseNMeasurementRelationship[0..*] baseMeasurementFrom
	refers Base2MeasurementRelationship[0..*] baseMeasurement2From
	refers GradeMeasurementRelationship[0..*] gradeFrom
	refers RescaledMeasurementRelationship[0..*] rescaleTo
	refers RankingMeasurementRelationship[0..*] rankingFrom
}

class DirectMeasure extends DimensionalMeasure
{
	refers Operation[?] operation
}

class DirectMeasurement extends DimensionalMeasurement {}

class EquivalentMeasureRelationship extends MeasureRelationship
{
	refers Operation[?] mapping
}

class EquivalentMeasurementRelationship extends MeasurementRelationship {}

class GradeMeasurement extends Measurement
{
	boolean[1] isBaseSupplied
	String[?] value
	refers GradeMeasurementRelationship[?] gradeTo
	refers Operation[?] baseQuery
}

abstract class Measure extends AbstractMeasureElement
{
	op Argument[0..*] getArguments() {
		/* This operation returns the set of arguments that the different operations of the measure have defined and got returned by getParamStrings() */
		
	}
	op Argument[0..*] getAllArguments() {
		/* This operation returns the set of arguments for this measure and any child measure required for the execution of the measure. 
		It should call getArguments() on itself and every one of its child measure */
	}
	
	Boolean[1] visible = "true"
	String[?] source
	String[?] measureLabelFormat
	String[?] measurementLabelFormat
	ScaleOfMeasurement[?] scale
	String[?] customScale
	
	refers RefinementMeasureRelationship[0..*] refinementFrom
	refers RefinementMeasureRelationship[0..*] refinementTo
	refers MeasureRelationship[0..*] inbound
	refers MeasureRelationship[0..*] outbound
	refers EquivalentMeasureRelationship[0..*] equivalentTo
	refers EquivalentMeasureRelationship[0..*] equivalentFrom
	refers Operation[?] defaultQuery	
	refers MeasureCategory[0..*] category opposite categoryMeasure
	refers Scope[1] scope
	refers Characteristic[1] trait
	
	contains MeasureRelationship[0..*] measureRelationships
}

class MeasureCategory extends AbstractMeasureElement {
	refers Measure[0..*] categoryMeasure opposite category
	refers MeasureCategory[0..*] category opposite categoryElement
	refers MeasureCategory[0..*] categoryElement opposite category
}

class MeasureLibrary extends SmmElement
{
	contains AbstractMeasureElement[0..*] measureElements
	contains CategoryRelationship[0..*] categoryRelationships
}

abstract class MeasureRelationship extends SmmRelationship
{
	Influence[0..1] influence
	refers Operation[0..1] measurandQuery
}

abstract class Measurement extends SmmElement
{
	op String[1] getMeasureLabel() {
		/* This operation returns the label describing the measure of this measurement according 
		to the rule specified in measureLabelFormat in the Measure class */ 
	}
	op String[1] getMeasurementLabel() {
		/* This operation returns the label describing this measurement and measurand 
		 * according to the rule specified in measurementLabelFormat in the Measure class
		 */
	}
	
	String[0..1] breakValue
	String[0..1] error
	
	contains MeasurementRelationship[0..*] measurementRelationships
	
	refers EquivalentMeasurementRelationship[0..*] equivalentFrom
	refers EquivalentMeasurementRelationship[0..*] equivalentTo
	
	refers MeasurementRelationship[0..*] outbound
	refers MeasurementRelationship[0..*] inbound 
	
	refers RefinementMeasurementRelationship[0..*] refinementTo
	refers RefinementMeasurementRelationship[0..*] refinementFrom
	
	refers ObservedMeasure[1] observedMeasure opposite measurements
	
	refers EObject measurand
}

abstract class MeasurementRelationship extends SmmRelationship {}

enum MeasurementScale 
{
	ordinal
	nominal
	ratio
	interval
}

class NamedMeasure extends DimensionalMeasure {}

class NamedMeasurement extends DimensionalMeasurement {}

class OCLOperation extends AbstractMeasureElement
{
	String[1] body
	String[1] context
}

class Observation extends SmmElement
{
	String[0..1] observer
	String[0..1] tool
	
	TimeStamp[0..1] whenObserved
	
	contains ObservationScope[0..*] scopes
	contains ObservedMeasure[0..*] observedMeasures
	contains Argument[0..*] arguments
	
	refers AbstractMeasureElement[0..*] requestedMeasures
}

class ObservationScope extends SmmElement
{
	String[1] scopeUri
}

class ObservedMeasure extends SmmElement
{
	contains Argument[0..*] arguments opposite observedMeasure
	contains Measurement[0..*] measurements opposite observedMeasure
	refers Measure[1] measure
}

class Operation extends AbstractMeasureElement
{
	op String[1] getParamStrings() {
		/**
		 * This operation returns the set of string that defines the parameter in use by an operation
		 */
		 return body
	}
	
	String[1] body
	String[1] language
}

class GradeMeasure extends Measure
{
	refers GradeMeasureRelationship[?] gradeTo
	contains GradeInterval[1..*] interval
}

class GradeInterval extends Interval
{
	String[1] symbol
}

class RankingMeasureRelationship extends ScaledBaseMeasureRelationship {}

class GradeMeasurementRelationship extends ScaledBaseMeasurementRelationship {}

class RatioMeasure extends BinaryMeasure {}

class RatioMeasurement extends BinaryMeasurement {}

class RefinementMeasureRelationship extends MeasureRelationship {}

class RefinementMeasurementRelationship extends MeasurementRelationship {}

class RescaledMeasure extends DimensionalMeasure
{
	refers RescaledMeasureRelationship[1..*] rescaleFrom
	refers ScaledBaseMeasureRelationship[?] rescales opposite rescaledMeasure
	refers Operation[0..1] operation
	
	double[1] offset = '0.0'
	double[1] multiplier  = '1.0'
	Boolean[1] operationFirst = 'false'
}

class RescaledMeasureRelationship extends BaseMeasureRelationship {}

class RescaledMeasurement extends DimensionalMeasurement
{
	Boolean[1] isBaseSupplied
	refers RescaledMeasurementRelationship[?] rescaleFrom
	refers Operation[?] baseQuery
}
class RescaledMeasurementRelationship extends BaseMeasurementRelationship {}

class Scope extends AbstractMeasureElement
{
	refers Operation[?] breakCondition
	refers Operation[?] recognizer 
	refers EObject[?] Class
	refers EObject[?] stereotype 
}	

abstract class SmmElement
{
	String[?] name 
	String[?] shortDescription 
	String[?] description 
	
	contains Attribute[0..*] attributes 
	contains Annotation[0..*] annotations
	
	refers SmmRelationship[0..*] inRelationships opposite to
	refers SmmRelationship[0..*] outRelationships opposite from 	
}
class SmmModel extends SmmElement
{
	contains MeasureLibrary[0..*] libraries
	contains Observation[0..*] observations	
}

abstract class SmmRelationship extends SmmElement
{
	refers SmmElement[1] to opposite inRelationships
	refers SmmElement[1] from opposite outRelationships	
}

enum Influence 
{
	positive
	negative
}

enum BinaryFunctor 
{
	 plus
	 minus
	 multiply
	 divide
	 custom
}

class RankingMeasure extends DimensionalMeasure
{
	contains RankingInterval[1..*] interval opposite ranking
	refers RankingMeasureRelationship[1] rankingTo
}

class RankingInterval extends Interval
{
	refers RankingMeasure[1] ranking opposite interval
	double[1] value 
}

class GradeMeasureRelationship extends ScaledBaseMeasureRelationship {}

abstract class ScaledBaseMeasureRelationship extends BaseMeasureRelationship
{
	contains RescaledMeasure[?] rescaledMeasure opposite rescales
}

enum ScaleOfMeasurement 
{
	nominal
	ordinal
	interval
	ratio
	custom
}

abstract class Interval extends SmmElement
{
	double[1] maximum 
	Boolean[1] maximumOpen = 'false'
	double[1] minimum 
	Boolean[1] minimumOpen = 'false'
}

class RankingMeasurement extends DimensionalMeasurement
{
	refers Operation[?] baseQuery
	refers RankingMeasurementRelationship[?] rankingTo
	Boolean[1] isBaseSupplied 
}

class RankingMeasurementRelationship extends ScaledBaseMeasurementRelationship {}

class UnitOfMeasure extends AbstractMeasureElement {}

abstract class ScaledBaseMeasurementRelationship extends BaseMeasurementRelationship {}

type TimeStamp wraps SimpleDateFormat

class CountingUnit extends UnitOfMeasure
{
	refers Scope[1] scope 
}

abstract class BaseMeasureRelationship extends MeasureRelationship {}

abstract class BaseMeasurementRelationship extends MeasurementRelationship {}	
